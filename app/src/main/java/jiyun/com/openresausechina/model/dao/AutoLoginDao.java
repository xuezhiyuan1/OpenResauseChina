package jiyun.com.openresausechina.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import jiyun.com.openresausechina.model.AutoLogin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTO_LOGIN".
*/
public class AutoLoginDao extends AbstractDao<AutoLogin, Long> {

    public static final String TABLENAME = "AUTO_LOGIN";

    /**
     * Properties of entity AutoLogin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Portrait = new Property(2, String.class, "portrait", false, "PORTRAIT");
        public final static Property Jointime = new Property(3, String.class, "jointime", false, "JOINTIME");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property Score = new Property(5, String.class, "score", false, "SCORE");
        public final static Property From = new Property(6, String.class, "from", false, "FROM");
        public final static Property Devplatform = new Property(7, String.class, "devplatform", false, "DEVPLATFORM");
        public final static Property Expertise = new Property(8, String.class, "expertise", false, "EXPERTISE");
        public final static Property Favoritecount = new Property(9, String.class, "favoritecount", false, "FAVORITECOUNT");
        public final static Property Fans = new Property(10, String.class, "fans", false, "FANS");
        public final static Property Followers = new Property(11, String.class, "followers", false, "FOLLOWERS");
    }


    public AutoLoginDao(DaoConfig config) {
        super(config);
    }
    
    public AutoLoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTO_LOGIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PORTRAIT\" TEXT," + // 2: portrait
                "\"JOINTIME\" TEXT," + // 3: jointime
                "\"GENDER\" TEXT," + // 4: gender
                "\"SCORE\" TEXT," + // 5: score
                "\"FROM\" TEXT," + // 6: from
                "\"DEVPLATFORM\" TEXT," + // 7: devplatform
                "\"EXPERTISE\" TEXT," + // 8: expertise
                "\"FAVORITECOUNT\" TEXT," + // 9: favoritecount
                "\"FANS\" TEXT," + // 10: fans
                "\"FOLLOWERS\" TEXT);"); // 11: followers
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTO_LOGIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AutoLogin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(3, portrait);
        }
 
        String jointime = entity.getJointime();
        if (jointime != null) {
            stmt.bindString(4, jointime);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(6, score);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String devplatform = entity.getDevplatform();
        if (devplatform != null) {
            stmt.bindString(8, devplatform);
        }
 
        String expertise = entity.getExpertise();
        if (expertise != null) {
            stmt.bindString(9, expertise);
        }
 
        String favoritecount = entity.getFavoritecount();
        if (favoritecount != null) {
            stmt.bindString(10, favoritecount);
        }
 
        String fans = entity.getFans();
        if (fans != null) {
            stmt.bindString(11, fans);
        }
 
        String followers = entity.getFollowers();
        if (followers != null) {
            stmt.bindString(12, followers);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AutoLogin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(3, portrait);
        }
 
        String jointime = entity.getJointime();
        if (jointime != null) {
            stmt.bindString(4, jointime);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(6, score);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String devplatform = entity.getDevplatform();
        if (devplatform != null) {
            stmt.bindString(8, devplatform);
        }
 
        String expertise = entity.getExpertise();
        if (expertise != null) {
            stmt.bindString(9, expertise);
        }
 
        String favoritecount = entity.getFavoritecount();
        if (favoritecount != null) {
            stmt.bindString(10, favoritecount);
        }
 
        String fans = entity.getFans();
        if (fans != null) {
            stmt.bindString(11, fans);
        }
 
        String followers = entity.getFollowers();
        if (followers != null) {
            stmt.bindString(12, followers);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AutoLogin readEntity(Cursor cursor, int offset) {
        AutoLogin entity = new AutoLogin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // portrait
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jointime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // score
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // from
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // devplatform
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // expertise
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // favoritecount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fans
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // followers
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AutoLogin entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPortrait(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJointime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScore(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDevplatform(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExpertise(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFavoritecount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFans(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFollowers(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AutoLogin entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AutoLogin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AutoLogin entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
